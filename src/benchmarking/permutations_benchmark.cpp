#include "../forkskinny-plus/headers/forkskinny64-plus.h"
#include "../headers/full-state-slicing.h"
#include <cstdint>
#include <iostream>
#include "cstdlib"

static inline void permute_sliced_circuit(State64Sliced_16_t *tk) {
	tk->slices[0] = ((tk->slices[0] & 0x00ff) << 8)
	                | ((tk->slices[0] & 0x8000) >> 14)
	                | ((tk->slices[0] & 0x2000) >> 10)
	                | ((tk->slices[0] & 0x4200) >> 9)
	                | ((tk->slices[0] & 0x1500) >> 6)
	                | ((tk->slices[0] & 0x0800) >> 4);
	
	tk->slices[1] = ((tk->slices[1] & 0x00ff) << 8)
	                | ((tk->slices[1] & 0x8000) >> 14)
	                | ((tk->slices[1] & 0x2000) >> 10)
	                | ((tk->slices[1] & 0x4200) >> 9)
	                | ((tk->slices[1] & 0x1500) >> 6)
	                | ((tk->slices[1] & 0x0800) >> 4);
	
	tk->slices[2] = ((tk->slices[2] & 0x00ff) << 8)
	                | ((tk->slices[2] & 0x8000) >> 14)
	                | ((tk->slices[2] & 0x2000) >> 10)
	                | ((tk->slices[2] & 0x4200) >> 9)
	                | ((tk->slices[2] & 0x1500) >> 6)
	                | ((tk->slices[2] & 0x0800) >> 4);
	
	tk->slices[3] = ((tk->slices[3] & 0x00ff) << 8)
	                | ((tk->slices[3] & 0x8000) >> 14)
	                | ((tk->slices[3] & 0x2000) >> 10)
	                | ((tk->slices[3] & 0x4200) >> 9)
	                | ((tk->slices[3] & 0x1500) >> 6)
	                | ((tk->slices[3] & 0x0800) >> 4);
}

static inline void permute_sliced_step(State64Sliced_16_t *tk) {
	// extract slices for simplicity
	auto slice0 = tk->slices[0];
	auto slice1 = tk->slices[1];
	auto slice2 = tk->slices[0];
	auto slice3 = tk->slices[3];
	
	// save top 2 rows
	auto slice0_row_1_2 = ((slice0 & 0xFF00));
	auto slice1_row_1_2 = ((slice1 & 0xFF00));
	auto slice2_row_1_2 = ((slice2 & 0xFF00));
	auto slice3_row_1_2 = ((slice3 & 0xFF00));
	
	// save last 2 rows
	auto slice0_row_3_4 = (slice0 & 0x00FF);
	auto slice1_row_3_4 = (slice1 & 0x00FF);
	auto slice2_row_3_4 = (slice2 & 0x00FF);
	auto slice3_row_3_4 = (slice3 & 0x00FF);
	
	// PT[8, 10, 12]
	slice0_row_3_4 |= ((slice0_row_3_4 & 0b10101000) >> 2);
	slice1_row_3_4 |= ((slice1_row_3_4 & 0b10101000) >> 2);
	slice2_row_3_4 |= ((slice2_row_3_4 & 0b10101000) >> 2);
	slice3_row_3_4 |= ((slice3_row_3_4 & 0b10101000) >> 2);
	
	
	// PT[9]
	slice0_row_3_4 |= ((slice0_row_3_4 & 0b01000000) << 1);
	slice1_row_3_4 |= ((slice1_row_3_4 & 0b01000000) << 1);
	slice2_row_3_4 |= ((slice2_row_3_4 & 0b01000000) << 1);
	slice3_row_3_4 |= ((slice3_row_3_4 & 0b01000000) << 1);
	
	// PT[11]
	slice0_row_3_4 |= (slice0_row_3_4 & 0b00010000) >> 4;
	slice1_row_3_4 |= (slice1_row_3_4 & 0b00010000) >> 4;
	slice2_row_3_4 |= (slice2_row_3_4 & 0b00010000) >> 4;
	slice3_row_3_4 |= (slice3_row_3_4 & 0b00010000) >> 4;
	
	// PT[13]
	slice0_row_3_4 |= (slice0_row_3_4 & 0b00000100) << 2;
	slice1_row_3_4 |= (slice1_row_3_4 & 0b00000100) << 2;
	slice2_row_3_4 |= (slice2_row_3_4 & 0b00000100) << 2;
	slice3_row_3_4 |= (slice3_row_3_4 & 0b00000100) << 2;
	
	// PT[14]
	slice0_row_3_4 |= (slice0_row_3_4 & 0b00000010) << 1;
	slice1_row_3_4 |= (slice1_row_3_4 & 0b00000010) << 1;
	slice2_row_3_4 |= (slice2_row_3_4 & 0b00000010) << 1;
	slice3_row_3_4 |= (slice3_row_3_4 & 0b00000010) << 1;
	
	// PT[15]
	slice0_row_3_4 |= (slice0_row_3_4 & 0b00000001) << 6;
	slice1_row_3_4 |= (slice1_row_3_4 & 0b00000001) << 6;
	slice2_row_3_4 |= (slice2_row_3_4 & 0b00000001) << 6;
	slice3_row_3_4 |= (slice3_row_3_4 & 0b00000001) << 6;
	
	tk->slices[0] = (slice0_row_3_4 << 8) | slice0_row_1_2;
	tk->slices[1] = (slice1_row_3_4 << 8) | slice1_row_1_2;
	tk->slices[2] = (slice2_row_3_4 << 8) | slice2_row_1_2;
	tk->slices[3] = (slice3_row_3_4 << 8) | slice3_row_1_2;
}

static inline void permute_old(State64_t *tk) {
	/* PT = [9, 15, 8, 13, 10, 14, 12, 11, 0, 1, 2, 3, 4, 5, 6, 7] */
	/* Permutation generated by http://programming.sirrida.de/calcperm.php */
	uint32_t x = tk->lrow[1];
	tk->lrow[1] = tk->lrow[0];
	tk->lrow[0] = ((x & 0x0000000FU) << 4) |
	              ((x & 0x00F0F0F0U) << 8) |
	              ((x & 0x0F000000U) >> 24) |
	              ((x & 0x00000F00U) << 16) |
	              ((x & 0xF0000000U) >> 12) |
	              ((x & 0x000F0000U) >> 8);
}


int main(int argc, char **argv) {
	uint64_t state = (((uint64_t) rand()) << 32) | ((uint64_t) rand());  // 2⁶⁴
	
	auto sliced1 = State64Sliced_16_t();
	sliced1.state = slice(state);
	
	auto sliced2 = State64Sliced_16_t();
	sliced2.state = slice(state);
	
	auto vanilla = State64_t();
	vanilla.llrow = state;
	
	permute_old(&vanilla);
	permute_sliced_step(&sliced1);
	permute_sliced_circuit(&sliced2);
	
	uint64_t unsliced_state2 = unslice(sliced2.state);
	uint64_t unsliced_state1 = unslice(sliced1.state);
	
	assert(vanilla.llrow == unsliced_state1);
	assert(unsliced_state1 == unsliced_state2);
	
	std::cout << "State was equal: " << unsliced_state1;
}