//#include <cassert>
#include <iostream>
#include <cassert>
#include "utils/forkskinny64-datatypes.h"
#include "utils/slicing64-accelerated.h"
#include "../test_vectors.h"
#include "forkskinny64.h"
#include "keyschedule/fixsliced-keyschedule64.h"
#include "keyschedule/keyschedule64.h"
//#include "keyschedule/fixsliced-keyschedule64.h"

//bool test_pt64(){
//	auto original_pt = Blocks64_t{.values = {{.bytes = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}}}};
//	auto sliced_state = slice(original_pt);
//
//	auto s_output = State64Sliced_t();
//	PT64_4(sliced_state, s_output)
//	auto output = unslice_accelerated(s_output).values[0].raw;
//
//
//	auto original_pt2 = Blocks64_t{.values = {{.bytes = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}}}};
//	auto sliced_state2 = slice(original_pt);
//	auto s_output2 = permute(permute(permute(permute(sliced_state2))));
//	auto output2 = unslice_accelerated(s_output2).values[0].raw;
//
//	int appel = 1;
//
//}

void test(){
	
	Blocks64_t b = {.values = {
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,

			/*// 64
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			0xAAAAAAAAAAAAAAAA,0xBBBBBBBBBBBBBBBB,0xCCCCCCCCCCCCCCCC,0xDDDDDDDDDDDDDDDD,
			//128
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,
			0x6666666666666666,0xBBBBBBBBBBBBBBBB,0x9999999999999999,0x5555555555555555,*/
	}};
	
	b = M_rand_64(9);
	//auto res = slice(b);
	auto res1 = slice_accelerated(b);
	auto unsliced = unslice_accelerated(res1);
	int appel = 1;
	
//	for (int i = 0; i < slice_size; ++i)
//		assert(res.raw[i].value == res1.raw[i].value);
	
	for (int i = 0; i < slice_size; ++i)
		assert(unsliced.values[i].raw == b.values[i].raw);
}


void test_forkskinny64_192() {
	auto M = slice_accelerated(M_64());
	auto TK1 = slice_accelerated(TK1_64(), false);
	auto TK2 = slice_accelerated(TK2_64(), false);
	auto TK3 = slice_accelerated(TK3_64(), false);
	auto original_pt = unslice_accelerated(M).values[0].raw;

	KeySchedule64Sliced_t schedule = forkskinny_64_fixsliced_init_tk23(TK1, TK2, TK3);

	// 0x EE00 FDE0
	// 0x 099B 203B
	// 0x 0EE2 40B2
	auto rtk0 = unslice_accelerated({.halves = {schedule.keys[0], {}}}, false).values[0].raw;
	auto rtk1 = unslice_accelerated({.halves = {schedule.keys[1], {}}}, false).values[0].raw;
	auto rtk2 = unslice_accelerated({.halves = {schedule.keys[2], {}}}, false).values[0].raw;

	// Ensure correct test vectors
	auto ct = forkskinny64_encrypt(schedule, &M, 'b');
	auto result_c0 = unslice_accelerated(ct.C0);
	auto result_c1 = unslice_accelerated(ct.C1);

	std::cout << "M [0]: ";
	print_block(unslice_accelerated(M).values[0].bytes, 8);

	std::cout << "\nC0 [0]: ";
	print_block(result_c0.values[0].bytes, 8);

	std::cout << "\nC1 [0]: ";
	print_block(result_c1.values[0].bytes, 8);

	for (int i = 0; i < slice_size; ++i) {
		assert(result_c0.values[i].raw == 0x502A9310B9F164FF);
		assert(result_c1.values[i].raw == 0x55520D27354ECF3);
	}

//	auto pt = forkskinny64_decrypt(schedule, &ct, '1', 'b');
//	auto result_M = unslice_accelerated(pt.M);
//	auto result_C0 = unslice_accelerated(pt.C0);
//
//	for (int i = 0; i < slice_size; ++i) {
//		assert(result_M.values[i].raw == original_pt);
//		assert(result_C0.values[i].raw == 0x502A9310B9F164FF);
//	}
}

int main() {
	test_forkskinny64_192();
	test();
	std::cout << "\n\nSuccess!";
}
